// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/proto/rmnm.proto

package nodemanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeManagerService_RegisterNode_FullMethodName  = "/carrot.rmnm.v1.NodeManagerService/RegisterNode"
	NodeManagerService_Heartbeat_FullMethodName     = "/carrot.rmnm.v1.NodeManagerService/Heartbeat"
	NodeManagerService_GetNodeStatus_FullMethodName = "/carrot.rmnm.v1.NodeManagerService/GetNodeStatus"
)

// NodeManagerServiceClient is the client API for NodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NodeManager gRPC 服务定义
type NodeManagerServiceClient interface {
	// 节点注册
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	// 节点心跳
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 获取节点状态
	GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*GetNodeStatusResponse, error)
}

type nodeManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerServiceClient(cc grpc.ClientConnInterface) NodeManagerServiceClient {
	return &nodeManagerServiceClient{cc}
}

func (c *nodeManagerServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, NodeManagerService_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, NodeManagerService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*GetNodeStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeStatusResponse)
	err := c.cc.Invoke(ctx, NodeManagerService_GetNodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServiceServer is the rmserver API for NodeManagerService service.
// All implementations must embed UnimplementedNodeManagerServiceServer
// for forward compatibility.
//
// NodeManager gRPC 服务定义
type NodeManagerServiceServer interface {
	// 节点注册
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	// 节点心跳
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 获取节点状态
	GetNodeStatus(context.Context, *GetNodeStatusRequest) (*GetNodeStatusResponse, error)
	mustEmbedUnimplementedNodeManagerServiceServer()
}

// UnimplementedNodeManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeManagerServiceServer struct{}

func (UnimplementedNodeManagerServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNodeManagerServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetNodeStatus(context.Context, *GetNodeStatusRequest) (*GetNodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatus not implemented")
}
func (UnimplementedNodeManagerServiceServer) mustEmbedUnimplementedNodeManagerServiceServer() {}
func (UnimplementedNodeManagerServiceServer) testEmbeddedByValue()                            {}

// UnsafeNodeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeManagerServiceServer will
// result in compilation errors.
type UnsafeNodeManagerServiceServer interface {
	mustEmbedUnimplementedNodeManagerServiceServer()
}

func RegisterNodeManagerServiceServer(s grpc.ServiceRegistrar, srv NodeManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeManagerService_ServiceDesc, srv)
}

func _NodeManagerService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManagerService_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManagerService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeManagerService_GetNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetNodeStatus(ctx, req.(*GetNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeManagerService_ServiceDesc is the grpc.ServiceDesc for NodeManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carrot.rmnm.v1.NodeManagerService",
	HandlerType: (*NodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeManagerService_RegisterNode_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _NodeManagerService_Heartbeat_Handler,
		},
		{
			MethodName: "GetNodeStatus",
			Handler:    _NodeManagerService_GetNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/rmnm.proto",
}
