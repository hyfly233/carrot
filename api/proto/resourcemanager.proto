syntax = "proto3";

package carrot.resourcemanager.v1;

option go_package = "carrot/api/proto/resourcemanager";

import "google/protobuf/timestamp.proto";

// ResourceManager gRPC 服务定义
service ResourceManagerService {
  // 节点管理
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc NodeHeartbeat(NodeHeartbeatRequest) returns (NodeHeartbeatResponse);
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
  
  // 应用程序管理
  rpc SubmitApplication(SubmitApplicationRequest) returns (SubmitApplicationResponse);
  rpc GetApplications(GetApplicationsRequest) returns (GetApplicationsResponse);
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse);
  rpc KillApplication(KillApplicationRequest) returns (KillApplicationResponse);
  
  // 集群信息
  rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse);
  rpc GetClusterMetrics(GetClusterMetricsRequest) returns (GetClusterMetricsResponse);
}

// 节点注册请求
message RegisterNodeRequest {
  NodeInfo node_info = 1;
  ResourceCapability total_capability = 2;
  string http_address = 3;
  string grpc_address = 4;
}

// 节点注册响应
message RegisterNodeResponse {
  bool success = 1;
  string message = 2;
  string node_id = 3;
  int64 registration_timestamp = 4;
}

// 节点心跳请求
message NodeHeartbeatRequest {
  string node_id = 1;
  ResourceUsage used_resources = 2;
  repeated ContainerStatus container_statuses = 3;
  google.protobuf.Timestamp timestamp = 4;
  HealthStatus health_status = 5;
  int32 sequence_number = 6;
}

// 节点心跳响应
message NodeHeartbeatResponse {
  bool success = 1;
  string message = 2;
  repeated ContainerAction container_actions = 3;
  int64 response_id = 4;
  int32 heartbeat_interval = 5; // 秒
  bool should_resync = 6; // 是否需要重新同步
}

// 获取节点列表请求
message GetNodesRequest {
  string state_filter = 1; // 可选的状态过滤器
  repeated string labels = 2; // 标签过滤器
}

// 获取节点列表响应
message GetNodesResponse {
  repeated Node nodes = 1;
  int32 total_count = 2;
}

// 提交应用程序请求
message SubmitApplicationRequest {
  ApplicationSubmissionContext application_context = 1;
}

// 提交应用程序响应
message SubmitApplicationResponse {
  bool success = 1;
  string message = 2;
  string application_id = 3;
}

// 获取应用程序列表请求
message GetApplicationsRequest {
  repeated string states = 1; // 状态过滤器
  string user_filter = 2; // 用户过滤器
  int32 limit = 3; // 结果限制
  int32 offset = 4; // 分页偏移
}

// 获取应用程序列表响应
message GetApplicationsResponse {
  repeated Application applications = 1;
  int32 total_count = 2;
}

// 获取单个应用程序请求
message GetApplicationRequest {
  string application_id = 1;
}

// 获取单个应用程序响应
message GetApplicationResponse {
  Application application = 1;
}

// 终止应用程序请求
message KillApplicationRequest {
  string application_id = 1;
  string reason = 2;
}

// 终止应用程序响应
message KillApplicationResponse {
  bool success = 1;
  string message = 2;
}

// 获取集群信息请求
message GetClusterInfoRequest {}

// 获取集群信息响应
message GetClusterInfoResponse {
  ClusterInfo cluster_info = 1;
}

// 获取集群指标请求
message GetClusterMetricsRequest {}

// 获取集群指标响应
message GetClusterMetricsResponse {
  ClusterMetrics cluster_metrics = 1;
}

// 数据结构

// 节点信息
message NodeInfo {
  string node_id = 1;
  string hostname = 2;
  string ip_address = 3;
  int32 port = 4;
  string rack_name = 5;
  repeated string labels = 6;
  google.protobuf.Timestamp last_heartbeat = 7;
}

// 节点
message Node {
  NodeInfo node_info = 1;
  ResourceCapability total_capability = 2;
  ResourceUsage used_resources = 3;
  NodeState state = 4;
  HealthStatus health_status = 5;
  int32 num_containers = 6;
}

// 资源能力
message ResourceCapability {
  int64 memory_mb = 1;
  int32 vcores = 2;
  map<string, int64> extended_resources = 3;
}

// 资源使用情况
message ResourceUsage {
  int64 memory_mb = 1;
  int32 vcores = 2;
  map<string, int64> extended_resources = 3;
  double cpu_usage_percent = 4;
  double memory_usage_percent = 5;
}

// 应用程序提交上下文
message ApplicationSubmissionContext {
  string application_name = 1;
  string queue = 2;
  string user = 3;
  ApplicationMasterContext am_context = 4;
  int32 priority = 5;
  map<string, string> application_tags = 6;
  int64 max_app_attempts = 7;
  ResourceCapability am_resource = 8;
}

// ApplicationMaster 上下文
message ApplicationMasterContext {
  string am_container_spec = 1;
  repeated string local_resources = 2;
  map<string, string> environment = 3;
  repeated string commands = 4;
}

// 应用程序
message Application {
  string application_id = 1;
  string application_name = 2;
  string user = 3;
  string queue = 4;
  ApplicationState state = 5;
  double progress = 6;
  string tracking_url = 7;
  string diagnostics = 8;
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp finish_time = 10;
  string final_status = 11;
  ResourceUsage allocated_resources = 12;
  ResourceUsage reserved_resources = 13;
  int32 priority = 14;
}

// 容器状态
message ContainerStatus {
  string container_id = 1;
  string application_id = 2;
  ContainerState state = 3;
  int32 exit_code = 4;
  string diagnostics = 5;
  ResourceUsage resource_usage = 6;
  google.protobuf.Timestamp start_time = 7;
  google.protobuf.Timestamp finish_time = 8;
  string node_id = 9;
}

// 容器操作
message ContainerAction {
  string container_id = 1;
  ActionType action = 2;
  string reason = 3;
  ResourceCapability resource = 4;
  map<string, string> environment = 5;
}

// 健康状态
message HealthStatus {
  HealthState state = 1;
  string last_health_report = 2;
  google.protobuf.Timestamp last_health_update = 3;
  repeated HealthCheck health_checks = 4;
}

// 健康检查
message HealthCheck {
  string name = 1;
  HealthState state = 2;
  string message = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// 集群信息
message ClusterInfo {
  string cluster_id = 1;
  string rm_version = 2;
  string resource_manager_build_version = 3;
  google.protobuf.Timestamp start_time = 4;
  string state = 5;
  string ha_state = 6;
  bool ha_enabled = 7;
  string rm_state_store = 8;
  string resource_manager_scheduler_class = 9;
}

// 集群指标
message ClusterMetrics {
  int32 apps_submitted = 1;
  int32 apps_completed = 2;
  int32 apps_pending = 3;
  int32 apps_running = 4;
  int32 apps_failed = 5;
  int32 apps_killed = 6;
  int64 reserved_memory = 7;
  int64 available_memory = 8;
  int64 allocated_memory = 9;
  int64 total_memory = 10;
  int32 reserved_vcores = 11;
  int32 available_vcores = 12;
  int32 allocated_vcores = 13;
  int32 total_vcores = 14;
  int32 containers_allocated = 15;
  int32 containers_reserved = 16;
  int32 containers_pending = 17;
  int32 total_nodes = 18;
  int32 active_nodes = 19;
  int32 lost_nodes = 20;
  int32 unhealthy_nodes = 21;
  int32 decommissioning_nodes = 22;
  int32 decommissioned_nodes = 23;
  int32 rebooted_nodes = 24;
}

// 枚举类型

// 节点状态
enum NodeState {
  NODE_STATE_UNSPECIFIED = 0;
  NODE_STATE_NEW = 1;
  NODE_STATE_RUNNING = 2;
  NODE_STATE_UNHEALTHY = 3;
  NODE_STATE_DECOMMISSIONING = 4;
  NODE_STATE_DECOMMISSIONED = 5;
  NODE_STATE_LOST = 6;
  NODE_STATE_REBOOTED = 7;
}

// 应用程序状态
enum ApplicationState {
  APPLICATION_STATE_UNSPECIFIED = 0;
  APPLICATION_STATE_NEW = 1;
  APPLICATION_STATE_NEW_SAVING = 2;
  APPLICATION_STATE_SUBMITTED = 3;
  APPLICATION_STATE_ACCEPTED = 4;
  APPLICATION_STATE_RUNNING = 5;
  APPLICATION_STATE_FINISHED = 6;
  APPLICATION_STATE_FAILED = 7;
  APPLICATION_STATE_KILLED = 8;
}

// 容器状态
enum ContainerState {
  CONTAINER_STATE_UNSPECIFIED = 0;
  CONTAINER_STATE_NEW = 1;
  CONTAINER_STATE_RUNNING = 2;
  CONTAINER_STATE_COMPLETE = 3;
  CONTAINER_STATE_FAILED = 4;
  CONTAINER_STATE_KILLED = 5;
}

// 容器操作类型
enum ActionType {
  ACTION_TYPE_UNSPECIFIED = 0;
  ACTION_TYPE_LAUNCH = 1;
  ACTION_TYPE_STOP = 2;
  ACTION_TYPE_KILL = 3;
  ACTION_TYPE_CLEANUP = 4;
}

// 健康状态
enum HealthState {
  HEALTH_STATE_UNSPECIFIED = 0;
  HEALTH_STATE_HEALTHY = 1;
  HEALTH_STATE_UNHEALTHY = 2;
  HEALTH_STATE_UNKNOWN = 3;
}
