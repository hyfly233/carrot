// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: applicationmaster.proto

package applicationmaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApplicationMasterService_RegisterApplicationMaster_FullMethodName = "/applicationmaster.ApplicationMasterService/RegisterApplicationMaster"
	ApplicationMasterService_Allocate_FullMethodName                  = "/applicationmaster.ApplicationMasterService/Allocate"
	ApplicationMasterService_FinishApplicationMaster_FullMethodName   = "/applicationmaster.ApplicationMasterService/FinishApplicationMaster"
	ApplicationMasterService_GetApplicationReport_FullMethodName      = "/applicationmaster.ApplicationMasterService/GetApplicationReport"
	ApplicationMasterService_GetClusterMetrics_FullMethodName         = "/applicationmaster.ApplicationMasterService/GetClusterMetrics"
)

// ApplicationMasterServiceClient is the client API for ApplicationMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ApplicationMaster 服务定义
type ApplicationMasterServiceClient interface {
	// 注册 ApplicationMaster 到 ResourceManager
	RegisterApplicationMaster(ctx context.Context, in *RegisterApplicationMasterRequest, opts ...grpc.CallOption) (*RegisterApplicationMasterResponse, error)
	// 资源分配请求 (心跳 + 容器请求/释放)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error)
	// 完成 ApplicationMaster 生命周期
	FinishApplicationMaster(ctx context.Context, in *FinishApplicationMasterRequest, opts ...grpc.CallOption) (*FinishApplicationMasterResponse, error)
	// 获取应用程序报告
	GetApplicationReport(ctx context.Context, in *GetApplicationReportRequest, opts ...grpc.CallOption) (*GetApplicationReportResponse, error)
	// 获取集群指标
	GetClusterMetrics(ctx context.Context, in *GetClusterMetricsRequest, opts ...grpc.CallOption) (*GetClusterMetricsResponse, error)
}

type applicationMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationMasterServiceClient(cc grpc.ClientConnInterface) ApplicationMasterServiceClient {
	return &applicationMasterServiceClient{cc}
}

func (c *applicationMasterServiceClient) RegisterApplicationMaster(ctx context.Context, in *RegisterApplicationMasterRequest, opts ...grpc.CallOption) (*RegisterApplicationMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterApplicationMasterResponse)
	err := c.cc.Invoke(ctx, ApplicationMasterService_RegisterApplicationMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMasterServiceClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateResponse)
	err := c.cc.Invoke(ctx, ApplicationMasterService_Allocate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMasterServiceClient) FinishApplicationMaster(ctx context.Context, in *FinishApplicationMasterRequest, opts ...grpc.CallOption) (*FinishApplicationMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinishApplicationMasterResponse)
	err := c.cc.Invoke(ctx, ApplicationMasterService_FinishApplicationMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMasterServiceClient) GetApplicationReport(ctx context.Context, in *GetApplicationReportRequest, opts ...grpc.CallOption) (*GetApplicationReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationReportResponse)
	err := c.cc.Invoke(ctx, ApplicationMasterService_GetApplicationReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationMasterServiceClient) GetClusterMetrics(ctx context.Context, in *GetClusterMetricsRequest, opts ...grpc.CallOption) (*GetClusterMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterMetricsResponse)
	err := c.cc.Invoke(ctx, ApplicationMasterService_GetClusterMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationMasterServiceServer is the rmserver API for ApplicationMasterService service.
// All implementations must embed UnimplementedApplicationMasterServiceServer
// for forward compatibility.
//
// ApplicationMaster 服务定义
type ApplicationMasterServiceServer interface {
	// 注册 ApplicationMaster 到 ResourceManager
	RegisterApplicationMaster(context.Context, *RegisterApplicationMasterRequest) (*RegisterApplicationMasterResponse, error)
	// 资源分配请求 (心跳 + 容器请求/释放)
	Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error)
	// 完成 ApplicationMaster 生命周期
	FinishApplicationMaster(context.Context, *FinishApplicationMasterRequest) (*FinishApplicationMasterResponse, error)
	// 获取应用程序报告
	GetApplicationReport(context.Context, *GetApplicationReportRequest) (*GetApplicationReportResponse, error)
	// 获取集群指标
	GetClusterMetrics(context.Context, *GetClusterMetricsRequest) (*GetClusterMetricsResponse, error)
	mustEmbedUnimplementedApplicationMasterServiceServer()
}

// UnimplementedApplicationMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApplicationMasterServiceServer struct{}

func (UnimplementedApplicationMasterServiceServer) RegisterApplicationMaster(context.Context, *RegisterApplicationMasterRequest) (*RegisterApplicationMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplicationMaster not implemented")
}
func (UnimplementedApplicationMasterServiceServer) Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedApplicationMasterServiceServer) FinishApplicationMaster(context.Context, *FinishApplicationMasterRequest) (*FinishApplicationMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishApplicationMaster not implemented")
}
func (UnimplementedApplicationMasterServiceServer) GetApplicationReport(context.Context, *GetApplicationReportRequest) (*GetApplicationReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationReport not implemented")
}
func (UnimplementedApplicationMasterServiceServer) GetClusterMetrics(context.Context, *GetClusterMetricsRequest) (*GetClusterMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterMetrics not implemented")
}
func (UnimplementedApplicationMasterServiceServer) mustEmbedUnimplementedApplicationMasterServiceServer() {
}
func (UnimplementedApplicationMasterServiceServer) testEmbeddedByValue() {}

// UnsafeApplicationMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationMasterServiceServer will
// result in compilation errors.
type UnsafeApplicationMasterServiceServer interface {
	mustEmbedUnimplementedApplicationMasterServiceServer()
}

func RegisterApplicationMasterServiceServer(s grpc.ServiceRegistrar, srv ApplicationMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedApplicationMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApplicationMasterService_ServiceDesc, srv)
}

func _ApplicationMasterService_RegisterApplicationMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApplicationMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMasterServiceServer).RegisterApplicationMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationMasterService_RegisterApplicationMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMasterServiceServer).RegisterApplicationMaster(ctx, req.(*RegisterApplicationMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMasterService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMasterServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationMasterService_Allocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMasterServiceServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMasterService_FinishApplicationMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishApplicationMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMasterServiceServer).FinishApplicationMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationMasterService_FinishApplicationMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMasterServiceServer).FinishApplicationMaster(ctx, req.(*FinishApplicationMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMasterService_GetApplicationReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMasterServiceServer).GetApplicationReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationMasterService_GetApplicationReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMasterServiceServer).GetApplicationReport(ctx, req.(*GetApplicationReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationMasterService_GetClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationMasterServiceServer).GetClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationMasterService_GetClusterMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationMasterServiceServer).GetClusterMetrics(ctx, req.(*GetClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationMasterService_ServiceDesc is the grpc.ServiceDesc for ApplicationMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applicationmaster.ApplicationMasterService",
	HandlerType: (*ApplicationMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplicationMaster",
			Handler:    _ApplicationMasterService_RegisterApplicationMaster_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _ApplicationMasterService_Allocate_Handler,
		},
		{
			MethodName: "FinishApplicationMaster",
			Handler:    _ApplicationMasterService_FinishApplicationMaster_Handler,
		},
		{
			MethodName: "GetApplicationReport",
			Handler:    _ApplicationMasterService_GetApplicationReport_Handler,
		},
		{
			MethodName: "GetClusterMetrics",
			Handler:    _ApplicationMasterService_GetClusterMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applicationmaster.proto",
}
