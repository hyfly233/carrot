// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: applicationmaster.proto

package applicationmaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 资源定义
type Resource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryMb      int64                  `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"` // 内存（MB）
	Vcores        int32                  `protobuf:"varint,2,opt,name=vcores,proto3" json:"vcores,omitempty"`                     // 虚拟核心数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_applicationmaster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{0}
}

func (x *Resource) GetMemoryMb() int64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *Resource) GetVcores() int32 {
	if x != nil {
		return x.Vcores
	}
	return 0
}

// 容器 ID
type ContainerID struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ApplicationAttemptId string                 `protobuf:"bytes,1,opt,name=application_attempt_id,json=applicationAttemptId,proto3" json:"application_attempt_id,omitempty"`
	ContainerId          int64                  `protobuf:"varint,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ContainerID) Reset() {
	*x = ContainerID{}
	mi := &file_applicationmaster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerID) ProtoMessage() {}

func (x *ContainerID) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerID.ProtoReflect.Descriptor instead.
func (*ContainerID) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerID) GetApplicationAttemptId() string {
	if x != nil {
		return x.ApplicationAttemptId
	}
	return ""
}

func (x *ContainerID) GetContainerId() int64 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

// 应用程序 ID
type ApplicationID struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ClusterTimestamp int64                  `protobuf:"varint,1,opt,name=cluster_timestamp,json=clusterTimestamp,proto3" json:"cluster_timestamp,omitempty"`
	Id               int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ApplicationID) Reset() {
	*x = ApplicationID{}
	mi := &file_applicationmaster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationID) ProtoMessage() {}

func (x *ApplicationID) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationID.ProtoReflect.Descriptor instead.
func (*ApplicationID) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationID) GetClusterTimestamp() int64 {
	if x != nil {
		return x.ClusterTimestamp
	}
	return 0
}

func (x *ApplicationID) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 应用程序尝试 ID
type ApplicationAttemptID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApplicationId *ApplicationID         `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	AttemptId     int32                  `protobuf:"varint,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationAttemptID) Reset() {
	*x = ApplicationAttemptID{}
	mi := &file_applicationmaster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationAttemptID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAttemptID) ProtoMessage() {}

func (x *ApplicationAttemptID) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAttemptID.ProtoReflect.Descriptor instead.
func (*ApplicationAttemptID) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationAttemptID) GetApplicationId() *ApplicationID {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *ApplicationAttemptID) GetAttemptId() int32 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

// 节点 ID
type NodeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	mi := &file_applicationmaster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{4}
}

func (x *NodeID) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NodeID) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 容器请求
type ContainerRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Capability          *Resource              `protobuf:"bytes,1,opt,name=capability,proto3" json:"capability,omitempty"`                                                // 请求的资源
	Nodes               []string               `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                                                          // 首选节点
	Racks               []string               `protobuf:"bytes,3,rep,name=racks,proto3" json:"racks,omitempty"`                                                          // 首选机架
	Priority            int32                  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`                                                   // 优先级
	RelaxLocality       bool                   `protobuf:"varint,5,opt,name=relax_locality,json=relaxLocality,proto3" json:"relax_locality,omitempty"`                    // 是否放松本地性约束
	NodeLabelExpression string                 `protobuf:"bytes,6,opt,name=node_label_expression,json=nodeLabelExpression,proto3" json:"node_label_expression,omitempty"` // 节点标签表达式
	ExecutionType       int64                  `protobuf:"varint,7,opt,name=execution_type,json=executionType,proto3" json:"execution_type,omitempty"`                    // 执行类型
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ContainerRequest) Reset() {
	*x = ContainerRequest{}
	mi := &file_applicationmaster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRequest) ProtoMessage() {}

func (x *ContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRequest.ProtoReflect.Descriptor instead.
func (*ContainerRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerRequest) GetCapability() *Resource {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *ContainerRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ContainerRequest) GetRacks() []string {
	if x != nil {
		return x.Racks
	}
	return nil
}

func (x *ContainerRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ContainerRequest) GetRelaxLocality() bool {
	if x != nil {
		return x.RelaxLocality
	}
	return false
}

func (x *ContainerRequest) GetNodeLabelExpression() string {
	if x != nil {
		return x.NodeLabelExpression
	}
	return ""
}

func (x *ContainerRequest) GetExecutionType() int64 {
	if x != nil {
		return x.ExecutionType
	}
	return 0
}

// 容器
type Container struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              *ContainerID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // 容器 ID
	NodeId          *NodeID                `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                              // 运行节点
	NodeHttpAddress string                 `protobuf:"bytes,3,opt,name=node_http_address,json=nodeHttpAddress,proto3" json:"node_http_address,omitempty"` // 节点 HTTP 地址
	Resource        *Resource              `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`                                        // 分配的资源
	Priority        int32                  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`                                       // 优先级
	Token           *ContainerToken        `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`                                              // 安全令牌
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_applicationmaster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{6}
}

func (x *Container) GetId() *ContainerID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Container) GetNodeId() *NodeID {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *Container) GetNodeHttpAddress() string {
	if x != nil {
		return x.NodeHttpAddress
	}
	return ""
}

func (x *Container) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Container) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Container) GetToken() *ContainerToken {
	if x != nil {
		return x.Token
	}
	return nil
}

// 容器令牌
type ContainerToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    []byte                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"` // 令牌标识符
	Password      []byte                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`     // 令牌密码
	Kind          string                 `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`             // 令牌类型
	Service       string                 `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`       // 服务名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerToken) Reset() {
	*x = ContainerToken{}
	mi := &file_applicationmaster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerToken) ProtoMessage() {}

func (x *ContainerToken) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerToken.ProtoReflect.Descriptor instead.
func (*ContainerToken) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerToken) GetIdentifier() []byte {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ContainerToken) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *ContainerToken) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ContainerToken) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// 容器状态
type ContainerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   *ContainerID           `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // 容器 ID
	State         int32                  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`                               // 容器状态
	Diagnostics   string                 `protobuf:"bytes,3,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`                    // 诊断信息
	ExitStatus    int32                  `protobuf:"varint,4,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`   // 退出状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	mi := &file_applicationmaster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerStatus) GetContainerId() *ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *ContainerStatus) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ContainerStatus) GetDiagnostics() string {
	if x != nil {
		return x.Diagnostics
	}
	return ""
}

func (x *ContainerStatus) GetExitStatus() int32 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

// 节点报告
type NodeReport struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NodeId               *NodeID                `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                                // 节点 ID
	NodeHttpAddress      string                 `protobuf:"bytes,2,opt,name=node_http_address,json=nodeHttpAddress,proto3" json:"node_http_address,omitempty"`                   // HTTP 地址
	NodeRackName         string                 `protobuf:"bytes,3,opt,name=node_rack_name,json=nodeRackName,proto3" json:"node_rack_name,omitempty"`                            // 机架名称
	Used                 *Resource              `protobuf:"bytes,4,opt,name=used,proto3" json:"used,omitempty"`                                                                  // 已使用资源
	Capability           *Resource              `protobuf:"bytes,5,opt,name=capability,proto3" json:"capability,omitempty"`                                                      // 总容量
	NumContainers        int32                  `protobuf:"varint,6,opt,name=num_containers,json=numContainers,proto3" json:"num_containers,omitempty"`                          // 容器数量
	NodeState            int32                  `protobuf:"varint,7,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`                                      // 节点状态
	HealthReport         string                 `protobuf:"bytes,8,opt,name=health_report,json=healthReport,proto3" json:"health_report,omitempty"`                              // 健康报告
	LastHealthReportTime int64                  `protobuf:"varint,9,opt,name=last_health_report_time,json=lastHealthReportTime,proto3" json:"last_health_report_time,omitempty"` // 最后健康报告时间
	NodeLabels           []string               `protobuf:"bytes,10,rep,name=node_labels,json=nodeLabels,proto3" json:"node_labels,omitempty"`                                   // 节点标签
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NodeReport) Reset() {
	*x = NodeReport{}
	mi := &file_applicationmaster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReport) ProtoMessage() {}

func (x *NodeReport) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReport.ProtoReflect.Descriptor instead.
func (*NodeReport) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{9}
}

func (x *NodeReport) GetNodeId() *NodeID {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeReport) GetNodeHttpAddress() string {
	if x != nil {
		return x.NodeHttpAddress
	}
	return ""
}

func (x *NodeReport) GetNodeRackName() string {
	if x != nil {
		return x.NodeRackName
	}
	return ""
}

func (x *NodeReport) GetUsed() *Resource {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *NodeReport) GetCapability() *Resource {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *NodeReport) GetNumContainers() int32 {
	if x != nil {
		return x.NumContainers
	}
	return 0
}

func (x *NodeReport) GetNodeState() int32 {
	if x != nil {
		return x.NodeState
	}
	return 0
}

func (x *NodeReport) GetHealthReport() string {
	if x != nil {
		return x.HealthReport
	}
	return ""
}

func (x *NodeReport) GetLastHealthReportTime() int64 {
	if x != nil {
		return x.LastHealthReportTime
	}
	return 0
}

func (x *NodeReport) GetNodeLabels() []string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

// 注册 ApplicationMaster 请求
type RegisterApplicationMasterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                  // AM 主机地址
	RpcPort       int32                  `protobuf:"varint,2,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`            // AM RPC 端口
	TrackingUrl   string                 `protobuf:"bytes,3,opt,name=tracking_url,json=trackingUrl,proto3" json:"tracking_url,omitempty"` // 跟踪 URL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterApplicationMasterRequest) Reset() {
	*x = RegisterApplicationMasterRequest{}
	mi := &file_applicationmaster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterApplicationMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationMasterRequest) ProtoMessage() {}

func (x *RegisterApplicationMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationMasterRequest.ProtoReflect.Descriptor instead.
func (*RegisterApplicationMasterRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterApplicationMasterRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RegisterApplicationMasterRequest) GetRpcPort() int32 {
	if x != nil {
		return x.RpcPort
	}
	return 0
}

func (x *RegisterApplicationMasterRequest) GetTrackingUrl() string {
	if x != nil {
		return x.TrackingUrl
	}
	return ""
}

// 注册 ApplicationMaster 响应
type RegisterApplicationMasterResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MaximumResourceCapability *Resource              `protobuf:"bytes,1,opt,name=maximum_resource_capability,json=maximumResourceCapability,proto3" json:"maximum_resource_capability,omitempty"`    // 最大资源容量
	ApplicationAcls           []string               `protobuf:"bytes,2,rep,name=application_acls,json=applicationAcls,proto3" json:"application_acls,omitempty"`                                    // 应用程序 ACL
	Queue                     string                 `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`                                                                               // 队列名称
	ClientToAmTokenMasterKey  []string               `protobuf:"bytes,4,rep,name=client_to_am_token_master_key,json=clientToAmTokenMasterKey,proto3" json:"client_to_am_token_master_key,omitempty"` // 客户端到 AM 的令牌主密钥
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RegisterApplicationMasterResponse) Reset() {
	*x = RegisterApplicationMasterResponse{}
	mi := &file_applicationmaster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterApplicationMasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterApplicationMasterResponse) ProtoMessage() {}

func (x *RegisterApplicationMasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterApplicationMasterResponse.ProtoReflect.Descriptor instead.
func (*RegisterApplicationMasterResponse) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterApplicationMasterResponse) GetMaximumResourceCapability() *Resource {
	if x != nil {
		return x.MaximumResourceCapability
	}
	return nil
}

func (x *RegisterApplicationMasterResponse) GetApplicationAcls() []string {
	if x != nil {
		return x.ApplicationAcls
	}
	return nil
}

func (x *RegisterApplicationMasterResponse) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *RegisterApplicationMasterResponse) GetClientToAmTokenMasterKey() []string {
	if x != nil {
		return x.ClientToAmTokenMasterKey
	}
	return nil
}

// 分配请求
type AllocateRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Ask                 []*ContainerRequest    `protobuf:"bytes,1,rep,name=ask,proto3" json:"ask,omitempty"`                                                            // 请求的容器
	Release             []*ContainerID         `protobuf:"bytes,2,rep,name=release,proto3" json:"release,omitempty"`                                                    // 释放的容器
	CompletedContainers []*ContainerStatus     `protobuf:"bytes,3,rep,name=completed_containers,json=completedContainers,proto3" json:"completed_containers,omitempty"` // 已完成容器状态
	Progress            float32                `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"`                                                // 应用程序进度
	ResponseId          int32                  `protobuf:"varint,5,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`                           // 响应 ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AllocateRequest) Reset() {
	*x = AllocateRequest{}
	mi := &file_applicationmaster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateRequest) ProtoMessage() {}

func (x *AllocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateRequest.ProtoReflect.Descriptor instead.
func (*AllocateRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{12}
}

func (x *AllocateRequest) GetAsk() []*ContainerRequest {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *AllocateRequest) GetRelease() []*ContainerID {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *AllocateRequest) GetCompletedContainers() []*ContainerStatus {
	if x != nil {
		return x.CompletedContainers
	}
	return nil
}

func (x *AllocateRequest) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *AllocateRequest) GetResponseId() int32 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

// 分配响应
type AllocateResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AllocatedContainers []*Container           `protobuf:"bytes,1,rep,name=allocated_containers,json=allocatedContainers,proto3" json:"allocated_containers,omitempty"` // 分配的容器
	CompletedContainers []*ContainerStatus     `protobuf:"bytes,2,rep,name=completed_containers,json=completedContainers,proto3" json:"completed_containers,omitempty"` // 已完成容器状态
	Limit               int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                       // 限制
	UpdatedNodes        []*NodeReport          `protobuf:"bytes,4,rep,name=updated_nodes,json=updatedNodes,proto3" json:"updated_nodes,omitempty"`                      // 更新的节点
	NumClusterNodes     int32                  `protobuf:"varint,5,opt,name=num_cluster_nodes,json=numClusterNodes,proto3" json:"num_cluster_nodes,omitempty"`          // 集群节点数
	AvailableResources  *Resource              `protobuf:"bytes,6,opt,name=available_resources,json=availableResources,proto3" json:"available_resources,omitempty"`    // 可用资源
	ResponseId          int32                  `protobuf:"varint,7,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`                           // 响应 ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AllocateResponse) Reset() {
	*x = AllocateResponse{}
	mi := &file_applicationmaster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateResponse) ProtoMessage() {}

func (x *AllocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateResponse.ProtoReflect.Descriptor instead.
func (*AllocateResponse) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{13}
}

func (x *AllocateResponse) GetAllocatedContainers() []*Container {
	if x != nil {
		return x.AllocatedContainers
	}
	return nil
}

func (x *AllocateResponse) GetCompletedContainers() []*ContainerStatus {
	if x != nil {
		return x.CompletedContainers
	}
	return nil
}

func (x *AllocateResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AllocateResponse) GetUpdatedNodes() []*NodeReport {
	if x != nil {
		return x.UpdatedNodes
	}
	return nil
}

func (x *AllocateResponse) GetNumClusterNodes() int32 {
	if x != nil {
		return x.NumClusterNodes
	}
	return 0
}

func (x *AllocateResponse) GetAvailableResources() *Resource {
	if x != nil {
		return x.AvailableResources
	}
	return nil
}

func (x *AllocateResponse) GetResponseId() int32 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

// 完成 ApplicationMaster 请求
type FinishApplicationMasterRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	FinalApplicationStatus string                 `protobuf:"bytes,1,opt,name=final_application_status,json=finalApplicationStatus,proto3" json:"final_application_status,omitempty"` // 最终应用程序状态
	Diagnostics            string                 `protobuf:"bytes,2,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`                                                       // 诊断信息
	TrackingUrl            string                 `protobuf:"bytes,3,opt,name=tracking_url,json=trackingUrl,proto3" json:"tracking_url,omitempty"`                                    // 跟踪 URL
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FinishApplicationMasterRequest) Reset() {
	*x = FinishApplicationMasterRequest{}
	mi := &file_applicationmaster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinishApplicationMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishApplicationMasterRequest) ProtoMessage() {}

func (x *FinishApplicationMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishApplicationMasterRequest.ProtoReflect.Descriptor instead.
func (*FinishApplicationMasterRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{14}
}

func (x *FinishApplicationMasterRequest) GetFinalApplicationStatus() string {
	if x != nil {
		return x.FinalApplicationStatus
	}
	return ""
}

func (x *FinishApplicationMasterRequest) GetDiagnostics() string {
	if x != nil {
		return x.Diagnostics
	}
	return ""
}

func (x *FinishApplicationMasterRequest) GetTrackingUrl() string {
	if x != nil {
		return x.TrackingUrl
	}
	return ""
}

// 完成 ApplicationMaster 响应
type FinishApplicationMasterResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsUnregistered bool                   `protobuf:"varint,1,opt,name=is_unregistered,json=isUnregistered,proto3" json:"is_unregistered,omitempty"` // 是否已注销
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FinishApplicationMasterResponse) Reset() {
	*x = FinishApplicationMasterResponse{}
	mi := &file_applicationmaster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinishApplicationMasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishApplicationMasterResponse) ProtoMessage() {}

func (x *FinishApplicationMasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishApplicationMasterResponse.ProtoReflect.Descriptor instead.
func (*FinishApplicationMasterResponse) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{15}
}

func (x *FinishApplicationMasterResponse) GetIsUnregistered() bool {
	if x != nil {
		return x.IsUnregistered
	}
	return false
}

// 获取应用程序报告请求
type GetApplicationReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApplicationId *ApplicationID         `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"` // 应用程序 ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetApplicationReportRequest) Reset() {
	*x = GetApplicationReportRequest{}
	mi := &file_applicationmaster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApplicationReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationReportRequest) ProtoMessage() {}

func (x *GetApplicationReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationReportRequest.ProtoReflect.Descriptor instead.
func (*GetApplicationReportRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{16}
}

func (x *GetApplicationReportRequest) GetApplicationId() *ApplicationID {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

// 获取应用程序报告响应
type GetApplicationReportResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ApplicationReport *ApplicationReport     `protobuf:"bytes,1,opt,name=application_report,json=applicationReport,proto3" json:"application_report,omitempty"` // 应用程序报告
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetApplicationReportResponse) Reset() {
	*x = GetApplicationReportResponse{}
	mi := &file_applicationmaster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApplicationReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationReportResponse) ProtoMessage() {}

func (x *GetApplicationReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationReportResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationReportResponse) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{17}
}

func (x *GetApplicationReportResponse) GetApplicationReport() *ApplicationReport {
	if x != nil {
		return x.ApplicationReport
	}
	return nil
}

// 应用程序报告
type ApplicationReport struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ApplicationId               *ApplicationID         `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`                                               // 应用程序 ID
	CurrentApplicationAttemptId *ApplicationAttemptID  `protobuf:"bytes,2,opt,name=current_application_attempt_id,json=currentApplicationAttemptId,proto3" json:"current_application_attempt_id,omitempty"` // 当前尝试 ID
	User                        string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                                                                                      // 用户
	Queue                       string                 `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`                                                                                    // 队列
	Name                        string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                                                      // 应用程序名称
	Host                        string                 `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`                                                                                      // 主机
	RpcPort                     int32                  `protobuf:"varint,7,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`                                                                // RPC 端口
	TrackingUrl                 string                 `protobuf:"bytes,8,opt,name=tracking_url,json=trackingUrl,proto3" json:"tracking_url,omitempty"`                                                     // 跟踪 URL
	ApplicationType             string                 `protobuf:"bytes,9,opt,name=application_type,json=applicationType,proto3" json:"application_type,omitempty"`                                         // 应用程序类型
	YarnApplicationState        int32                  `protobuf:"varint,10,opt,name=yarn_application_state,json=yarnApplicationState,proto3" json:"yarn_application_state,omitempty"`                      // YARN 应用程序状态
	FinalApplicationStatus      string                 `protobuf:"bytes,11,opt,name=final_application_status,json=finalApplicationStatus,proto3" json:"final_application_status,omitempty"`                 // 最终状态
	Progress                    float32                `protobuf:"fixed32,12,opt,name=progress,proto3" json:"progress,omitempty"`                                                                           // 进度
	StartTime                   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                          // 开始时间
	FinishTime                  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`                                                       // 完成时间
	Diagnostics                 string                 `protobuf:"bytes,15,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`                                                                       // 诊断信息
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ApplicationReport) Reset() {
	*x = ApplicationReport{}
	mi := &file_applicationmaster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationReport) ProtoMessage() {}

func (x *ApplicationReport) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationReport.ProtoReflect.Descriptor instead.
func (*ApplicationReport) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{18}
}

func (x *ApplicationReport) GetApplicationId() *ApplicationID {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *ApplicationReport) GetCurrentApplicationAttemptId() *ApplicationAttemptID {
	if x != nil {
		return x.CurrentApplicationAttemptId
	}
	return nil
}

func (x *ApplicationReport) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ApplicationReport) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *ApplicationReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationReport) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ApplicationReport) GetRpcPort() int32 {
	if x != nil {
		return x.RpcPort
	}
	return 0
}

func (x *ApplicationReport) GetTrackingUrl() string {
	if x != nil {
		return x.TrackingUrl
	}
	return ""
}

func (x *ApplicationReport) GetApplicationType() string {
	if x != nil {
		return x.ApplicationType
	}
	return ""
}

func (x *ApplicationReport) GetYarnApplicationState() int32 {
	if x != nil {
		return x.YarnApplicationState
	}
	return 0
}

func (x *ApplicationReport) GetFinalApplicationStatus() string {
	if x != nil {
		return x.FinalApplicationStatus
	}
	return ""
}

func (x *ApplicationReport) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ApplicationReport) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ApplicationReport) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *ApplicationReport) GetDiagnostics() string {
	if x != nil {
		return x.Diagnostics
	}
	return ""
}

// 获取集群指标请求
type GetClusterMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterMetricsRequest) Reset() {
	*x = GetClusterMetricsRequest{}
	mi := &file_applicationmaster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterMetricsRequest) ProtoMessage() {}

func (x *GetClusterMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetClusterMetricsRequest) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{19}
}

// 获取集群指标响应
type GetClusterMetricsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClusterMetrics *ClusterMetrics        `protobuf:"bytes,1,opt,name=cluster_metrics,json=clusterMetrics,proto3" json:"cluster_metrics,omitempty"` // 集群指标
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetClusterMetricsResponse) Reset() {
	*x = GetClusterMetricsResponse{}
	mi := &file_applicationmaster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterMetricsResponse) ProtoMessage() {}

func (x *GetClusterMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetClusterMetricsResponse) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{20}
}

func (x *GetClusterMetricsResponse) GetClusterMetrics() *ClusterMetrics {
	if x != nil {
		return x.ClusterMetrics
	}
	return nil
}

// 集群指标
type ClusterMetrics struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AppsSubmitted         int32                  `protobuf:"varint,1,opt,name=apps_submitted,json=appsSubmitted,proto3" json:"apps_submitted,omitempty"`                            // 已提交应用程序数
	AppsCompleted         int32                  `protobuf:"varint,2,opt,name=apps_completed,json=appsCompleted,proto3" json:"apps_completed,omitempty"`                            // 已完成应用程序数
	AppsPending           int32                  `protobuf:"varint,3,opt,name=apps_pending,json=appsPending,proto3" json:"apps_pending,omitempty"`                                  // 待处理应用程序数
	AppsRunning           int32                  `protobuf:"varint,4,opt,name=apps_running,json=appsRunning,proto3" json:"apps_running,omitempty"`                                  // 运行中应用程序数
	AppsFailed            int32                  `protobuf:"varint,5,opt,name=apps_failed,json=appsFailed,proto3" json:"apps_failed,omitempty"`                                     // 失败应用程序数
	AppsKilled            int32                  `protobuf:"varint,6,opt,name=apps_killed,json=appsKilled,proto3" json:"apps_killed,omitempty"`                                     // 被杀死应用程序数
	ReservedMb            *Resource              `protobuf:"bytes,7,opt,name=reserved_mb,json=reservedMb,proto3" json:"reserved_mb,omitempty"`                                      // 保留内存
	AvailableMb           *Resource              `protobuf:"bytes,8,opt,name=available_mb,json=availableMb,proto3" json:"available_mb,omitempty"`                                   // 可用内存
	AllocatedMb           *Resource              `protobuf:"bytes,9,opt,name=allocated_mb,json=allocatedMb,proto3" json:"allocated_mb,omitempty"`                                   // 已分配内存
	ReservedVirtualCores  int32                  `protobuf:"varint,10,opt,name=reserved_virtual_cores,json=reservedVirtualCores,proto3" json:"reserved_virtual_cores,omitempty"`    // 保留虚拟核心
	AvailableVirtualCores int32                  `protobuf:"varint,11,opt,name=available_virtual_cores,json=availableVirtualCores,proto3" json:"available_virtual_cores,omitempty"` // 可用虚拟核心
	AllocatedVirtualCores int32                  `protobuf:"varint,12,opt,name=allocated_virtual_cores,json=allocatedVirtualCores,proto3" json:"allocated_virtual_cores,omitempty"` // 已分配虚拟核心
	ActiveNodes           int32                  `protobuf:"varint,13,opt,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`                                 // 活跃节点数
	LostNodes             int32                  `protobuf:"varint,14,opt,name=lost_nodes,json=lostNodes,proto3" json:"lost_nodes,omitempty"`                                       // 丢失节点数
	UnhealthyNodes        int32                  `protobuf:"varint,15,opt,name=unhealthy_nodes,json=unhealthyNodes,proto3" json:"unhealthy_nodes,omitempty"`                        // 不健康节点数
	DecommissionedNodes   int32                  `protobuf:"varint,16,opt,name=decommissioned_nodes,json=decommissionedNodes,proto3" json:"decommissioned_nodes,omitempty"`         // 退役节点数
	TotalNodes            int32                  `protobuf:"varint,17,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`                                    // 总节点数
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClusterMetrics) Reset() {
	*x = ClusterMetrics{}
	mi := &file_applicationmaster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetrics) ProtoMessage() {}

func (x *ClusterMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_applicationmaster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetrics.ProtoReflect.Descriptor instead.
func (*ClusterMetrics) Descriptor() ([]byte, []int) {
	return file_applicationmaster_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterMetrics) GetAppsSubmitted() int32 {
	if x != nil {
		return x.AppsSubmitted
	}
	return 0
}

func (x *ClusterMetrics) GetAppsCompleted() int32 {
	if x != nil {
		return x.AppsCompleted
	}
	return 0
}

func (x *ClusterMetrics) GetAppsPending() int32 {
	if x != nil {
		return x.AppsPending
	}
	return 0
}

func (x *ClusterMetrics) GetAppsRunning() int32 {
	if x != nil {
		return x.AppsRunning
	}
	return 0
}

func (x *ClusterMetrics) GetAppsFailed() int32 {
	if x != nil {
		return x.AppsFailed
	}
	return 0
}

func (x *ClusterMetrics) GetAppsKilled() int32 {
	if x != nil {
		return x.AppsKilled
	}
	return 0
}

func (x *ClusterMetrics) GetReservedMb() *Resource {
	if x != nil {
		return x.ReservedMb
	}
	return nil
}

func (x *ClusterMetrics) GetAvailableMb() *Resource {
	if x != nil {
		return x.AvailableMb
	}
	return nil
}

func (x *ClusterMetrics) GetAllocatedMb() *Resource {
	if x != nil {
		return x.AllocatedMb
	}
	return nil
}

func (x *ClusterMetrics) GetReservedVirtualCores() int32 {
	if x != nil {
		return x.ReservedVirtualCores
	}
	return 0
}

func (x *ClusterMetrics) GetAvailableVirtualCores() int32 {
	if x != nil {
		return x.AvailableVirtualCores
	}
	return 0
}

func (x *ClusterMetrics) GetAllocatedVirtualCores() int32 {
	if x != nil {
		return x.AllocatedVirtualCores
	}
	return 0
}

func (x *ClusterMetrics) GetActiveNodes() int32 {
	if x != nil {
		return x.ActiveNodes
	}
	return 0
}

func (x *ClusterMetrics) GetLostNodes() int32 {
	if x != nil {
		return x.LostNodes
	}
	return 0
}

func (x *ClusterMetrics) GetUnhealthyNodes() int32 {
	if x != nil {
		return x.UnhealthyNodes
	}
	return 0
}

func (x *ClusterMetrics) GetDecommissionedNodes() int32 {
	if x != nil {
		return x.DecommissionedNodes
	}
	return 0
}

func (x *ClusterMetrics) GetTotalNodes() int32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

var File_applicationmaster_proto protoreflect.FileDescriptor

const file_applicationmaster_proto_rawDesc = "" +
	"\n" +
	"\x17applicationmaster.proto\x12\x11applicationmaster\x1a\x1fgoogle/protobuf/timestamp.proto\"?\n" +
	"\bResource\x12\x1b\n" +
	"\tmemory_mb\x18\x01 \x01(\x03R\bmemoryMb\x12\x16\n" +
	"\x06vcores\x18\x02 \x01(\x05R\x06vcores\"f\n" +
	"\vContainerID\x124\n" +
	"\x16application_attempt_id\x18\x01 \x01(\tR\x14applicationAttemptId\x12!\n" +
	"\fcontainer_id\x18\x02 \x01(\x03R\vcontainerId\"L\n" +
	"\rApplicationID\x12+\n" +
	"\x11cluster_timestamp\x18\x01 \x01(\x03R\x10clusterTimestamp\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x05R\x02id\"~\n" +
	"\x14ApplicationAttemptID\x12G\n" +
	"\x0eapplication_id\x18\x01 \x01(\v2 .applicationmaster.ApplicationIDR\rapplicationId\x12\x1d\n" +
	"\n" +
	"attempt_id\x18\x02 \x01(\x05R\tattemptId\"0\n" +
	"\x06NodeID\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\"\x99\x02\n" +
	"\x10ContainerRequest\x12;\n" +
	"\n" +
	"capability\x18\x01 \x01(\v2\x1b.applicationmaster.ResourceR\n" +
	"capability\x12\x14\n" +
	"\x05nodes\x18\x02 \x03(\tR\x05nodes\x12\x14\n" +
	"\x05racks\x18\x03 \x03(\tR\x05racks\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x05R\bpriority\x12%\n" +
	"\x0erelax_locality\x18\x05 \x01(\bR\rrelaxLocality\x122\n" +
	"\x15node_label_expression\x18\x06 \x01(\tR\x13nodeLabelExpression\x12%\n" +
	"\x0eexecution_type\x18\a \x01(\x03R\rexecutionType\"\xa9\x02\n" +
	"\tContainer\x12.\n" +
	"\x02id\x18\x01 \x01(\v2\x1e.applicationmaster.ContainerIDR\x02id\x122\n" +
	"\anode_id\x18\x02 \x01(\v2\x19.applicationmaster.NodeIDR\x06nodeId\x12*\n" +
	"\x11node_http_address\x18\x03 \x01(\tR\x0fnodeHttpAddress\x127\n" +
	"\bresource\x18\x04 \x01(\v2\x1b.applicationmaster.ResourceR\bresource\x12\x1a\n" +
	"\bpriority\x18\x05 \x01(\x05R\bpriority\x127\n" +
	"\x05token\x18\x06 \x01(\v2!.applicationmaster.ContainerTokenR\x05token\"z\n" +
	"\x0eContainerToken\x12\x1e\n" +
	"\n" +
	"identifier\x18\x01 \x01(\fR\n" +
	"identifier\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\fR\bpassword\x12\x12\n" +
	"\x04kind\x18\x03 \x01(\tR\x04kind\x12\x18\n" +
	"\aservice\x18\x04 \x01(\tR\aservice\"\xad\x01\n" +
	"\x0fContainerStatus\x12A\n" +
	"\fcontainer_id\x18\x01 \x01(\v2\x1e.applicationmaster.ContainerIDR\vcontainerId\x12\x14\n" +
	"\x05state\x18\x02 \x01(\x05R\x05state\x12 \n" +
	"\vdiagnostics\x18\x03 \x01(\tR\vdiagnostics\x12\x1f\n" +
	"\vexit_status\x18\x04 \x01(\x05R\n" +
	"exitStatus\"\xc3\x03\n" +
	"\n" +
	"NodeReport\x122\n" +
	"\anode_id\x18\x01 \x01(\v2\x19.applicationmaster.NodeIDR\x06nodeId\x12*\n" +
	"\x11node_http_address\x18\x02 \x01(\tR\x0fnodeHttpAddress\x12$\n" +
	"\x0enode_rack_name\x18\x03 \x01(\tR\fnodeRackName\x12/\n" +
	"\x04used\x18\x04 \x01(\v2\x1b.applicationmaster.ResourceR\x04used\x12;\n" +
	"\n" +
	"capability\x18\x05 \x01(\v2\x1b.applicationmaster.ResourceR\n" +
	"capability\x12%\n" +
	"\x0enum_containers\x18\x06 \x01(\x05R\rnumContainers\x12\x1d\n" +
	"\n" +
	"node_state\x18\a \x01(\x05R\tnodeState\x12#\n" +
	"\rhealth_report\x18\b \x01(\tR\fhealthReport\x125\n" +
	"\x17last_health_report_time\x18\t \x01(\x03R\x14lastHealthReportTime\x12\x1f\n" +
	"\vnode_labels\x18\n" +
	" \x03(\tR\n" +
	"nodeLabels\"t\n" +
	" RegisterApplicationMasterRequest\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x19\n" +
	"\brpc_port\x18\x02 \x01(\x05R\arpcPort\x12!\n" +
	"\ftracking_url\x18\x03 \x01(\tR\vtrackingUrl\"\x82\x02\n" +
	"!RegisterApplicationMasterResponse\x12[\n" +
	"\x1bmaximum_resource_capability\x18\x01 \x01(\v2\x1b.applicationmaster.ResourceR\x19maximumResourceCapability\x12)\n" +
	"\x10application_acls\x18\x02 \x03(\tR\x0fapplicationAcls\x12\x14\n" +
	"\x05queue\x18\x03 \x01(\tR\x05queue\x12?\n" +
	"\x1dclient_to_am_token_master_key\x18\x04 \x03(\tR\x18clientToAmTokenMasterKey\"\x96\x02\n" +
	"\x0fAllocateRequest\x125\n" +
	"\x03ask\x18\x01 \x03(\v2#.applicationmaster.ContainerRequestR\x03ask\x128\n" +
	"\arelease\x18\x02 \x03(\v2\x1e.applicationmaster.ContainerIDR\arelease\x12U\n" +
	"\x14completed_containers\x18\x03 \x03(\v2\".applicationmaster.ContainerStatusR\x13completedContainers\x12\x1a\n" +
	"\bprogress\x18\x04 \x01(\x02R\bprogress\x12\x1f\n" +
	"\vresponse_id\x18\x05 \x01(\x05R\n" +
	"responseId\"\xaf\x03\n" +
	"\x10AllocateResponse\x12O\n" +
	"\x14allocated_containers\x18\x01 \x03(\v2\x1c.applicationmaster.ContainerR\x13allocatedContainers\x12U\n" +
	"\x14completed_containers\x18\x02 \x03(\v2\".applicationmaster.ContainerStatusR\x13completedContainers\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12B\n" +
	"\rupdated_nodes\x18\x04 \x03(\v2\x1d.applicationmaster.NodeReportR\fupdatedNodes\x12*\n" +
	"\x11num_cluster_nodes\x18\x05 \x01(\x05R\x0fnumClusterNodes\x12L\n" +
	"\x13available_resources\x18\x06 \x01(\v2\x1b.applicationmaster.ResourceR\x12availableResources\x12\x1f\n" +
	"\vresponse_id\x18\a \x01(\x05R\n" +
	"responseId\"\x9f\x01\n" +
	"\x1eFinishApplicationMasterRequest\x128\n" +
	"\x18final_application_status\x18\x01 \x01(\tR\x16finalApplicationStatus\x12 \n" +
	"\vdiagnostics\x18\x02 \x01(\tR\vdiagnostics\x12!\n" +
	"\ftracking_url\x18\x03 \x01(\tR\vtrackingUrl\"J\n" +
	"\x1fFinishApplicationMasterResponse\x12'\n" +
	"\x0fis_unregistered\x18\x01 \x01(\bR\x0eisUnregistered\"f\n" +
	"\x1bGetApplicationReportRequest\x12G\n" +
	"\x0eapplication_id\x18\x01 \x01(\v2 .applicationmaster.ApplicationIDR\rapplicationId\"s\n" +
	"\x1cGetApplicationReportResponse\x12S\n" +
	"\x12application_report\x18\x01 \x01(\v2$.applicationmaster.ApplicationReportR\x11applicationReport\"\xab\x05\n" +
	"\x11ApplicationReport\x12G\n" +
	"\x0eapplication_id\x18\x01 \x01(\v2 .applicationmaster.ApplicationIDR\rapplicationId\x12l\n" +
	"\x1ecurrent_application_attempt_id\x18\x02 \x01(\v2'.applicationmaster.ApplicationAttemptIDR\x1bcurrentApplicationAttemptId\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x14\n" +
	"\x05queue\x18\x04 \x01(\tR\x05queue\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x06 \x01(\tR\x04host\x12\x19\n" +
	"\brpc_port\x18\a \x01(\x05R\arpcPort\x12!\n" +
	"\ftracking_url\x18\b \x01(\tR\vtrackingUrl\x12)\n" +
	"\x10application_type\x18\t \x01(\tR\x0fapplicationType\x124\n" +
	"\x16yarn_application_state\x18\n" +
	" \x01(\x05R\x14yarnApplicationState\x128\n" +
	"\x18final_application_status\x18\v \x01(\tR\x16finalApplicationStatus\x12\x1a\n" +
	"\bprogress\x18\f \x01(\x02R\bprogress\x129\n" +
	"\n" +
	"start_time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12;\n" +
	"\vfinish_time\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"finishTime\x12 \n" +
	"\vdiagnostics\x18\x0f \x01(\tR\vdiagnostics\"\x1a\n" +
	"\x18GetClusterMetricsRequest\"g\n" +
	"\x19GetClusterMetricsResponse\x12J\n" +
	"\x0fcluster_metrics\x18\x01 \x01(\v2!.applicationmaster.ClusterMetricsR\x0eclusterMetrics\"\x89\x06\n" +
	"\x0eClusterMetrics\x12%\n" +
	"\x0eapps_submitted\x18\x01 \x01(\x05R\rappsSubmitted\x12%\n" +
	"\x0eapps_completed\x18\x02 \x01(\x05R\rappsCompleted\x12!\n" +
	"\fapps_pending\x18\x03 \x01(\x05R\vappsPending\x12!\n" +
	"\fapps_running\x18\x04 \x01(\x05R\vappsRunning\x12\x1f\n" +
	"\vapps_failed\x18\x05 \x01(\x05R\n" +
	"appsFailed\x12\x1f\n" +
	"\vapps_killed\x18\x06 \x01(\x05R\n" +
	"appsKilled\x12<\n" +
	"\vreserved_mb\x18\a \x01(\v2\x1b.applicationmaster.ResourceR\n" +
	"reservedMb\x12>\n" +
	"\favailable_mb\x18\b \x01(\v2\x1b.applicationmaster.ResourceR\vavailableMb\x12>\n" +
	"\fallocated_mb\x18\t \x01(\v2\x1b.applicationmaster.ResourceR\vallocatedMb\x124\n" +
	"\x16reserved_virtual_cores\x18\n" +
	" \x01(\x05R\x14reservedVirtualCores\x126\n" +
	"\x17available_virtual_cores\x18\v \x01(\x05R\x15availableVirtualCores\x126\n" +
	"\x17allocated_virtual_cores\x18\f \x01(\x05R\x15allocatedVirtualCores\x12!\n" +
	"\factive_nodes\x18\r \x01(\x05R\vactiveNodes\x12\x1d\n" +
	"\n" +
	"lost_nodes\x18\x0e \x01(\x05R\tlostNodes\x12'\n" +
	"\x0funhealthy_nodes\x18\x0f \x01(\x05R\x0eunhealthyNodes\x121\n" +
	"\x14decommissioned_nodes\x18\x10 \x01(\x05R\x13decommissionedNodes\x12\x1f\n" +
	"\vtotal_nodes\x18\x11 \x01(\x05R\n" +
	"totalNodes2\xe4\x04\n" +
	"\x18ApplicationMasterService\x12\x86\x01\n" +
	"\x19RegisterApplicationMaster\x123.applicationmaster.RegisterApplicationMasterRequest\x1a4.applicationmaster.RegisterApplicationMasterResponse\x12S\n" +
	"\bAllocate\x12\".applicationmaster.AllocateRequest\x1a#.applicationmaster.AllocateResponse\x12\x80\x01\n" +
	"\x17FinishApplicationMaster\x121.applicationmaster.FinishApplicationMasterRequest\x1a2.applicationmaster.FinishApplicationMasterResponse\x12w\n" +
	"\x14GetApplicationReport\x12..applicationmaster.GetApplicationReportRequest\x1a/.applicationmaster.GetApplicationReportResponse\x12n\n" +
	"\x11GetClusterMetrics\x12+.applicationmaster.GetClusterMetricsRequest\x1a,.applicationmaster.GetClusterMetricsResponseB$Z\"carrot/api/proto/applicationmasterb\x06proto3"

var (
	file_applicationmaster_proto_rawDescOnce sync.Once
	file_applicationmaster_proto_rawDescData []byte
)

func file_applicationmaster_proto_rawDescGZIP() []byte {
	file_applicationmaster_proto_rawDescOnce.Do(func() {
		file_applicationmaster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_applicationmaster_proto_rawDesc), len(file_applicationmaster_proto_rawDesc)))
	})
	return file_applicationmaster_proto_rawDescData
}

var file_applicationmaster_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_applicationmaster_proto_goTypes = []any{
	(*Resource)(nil),                          // 0: applicationmaster.Resource
	(*ContainerID)(nil),                       // 1: applicationmaster.ContainerID
	(*ApplicationID)(nil),                     // 2: applicationmaster.ApplicationID
	(*ApplicationAttemptID)(nil),              // 3: applicationmaster.ApplicationAttemptID
	(*NodeID)(nil),                            // 4: applicationmaster.NodeID
	(*ContainerRequest)(nil),                  // 5: applicationmaster.ContainerRequest
	(*Container)(nil),                         // 6: applicationmaster.Container
	(*ContainerToken)(nil),                    // 7: applicationmaster.ContainerToken
	(*ContainerStatus)(nil),                   // 8: applicationmaster.ContainerStatus
	(*NodeReport)(nil),                        // 9: applicationmaster.NodeReport
	(*RegisterApplicationMasterRequest)(nil),  // 10: applicationmaster.RegisterApplicationMasterRequest
	(*RegisterApplicationMasterResponse)(nil), // 11: applicationmaster.RegisterApplicationMasterResponse
	(*AllocateRequest)(nil),                   // 12: applicationmaster.AllocateRequest
	(*AllocateResponse)(nil),                  // 13: applicationmaster.AllocateResponse
	(*FinishApplicationMasterRequest)(nil),    // 14: applicationmaster.FinishApplicationMasterRequest
	(*FinishApplicationMasterResponse)(nil),   // 15: applicationmaster.FinishApplicationMasterResponse
	(*GetApplicationReportRequest)(nil),       // 16: applicationmaster.GetApplicationReportRequest
	(*GetApplicationReportResponse)(nil),      // 17: applicationmaster.GetApplicationReportResponse
	(*ApplicationReport)(nil),                 // 18: applicationmaster.ApplicationReport
	(*GetClusterMetricsRequest)(nil),          // 19: applicationmaster.GetClusterMetricsRequest
	(*GetClusterMetricsResponse)(nil),         // 20: applicationmaster.GetClusterMetricsResponse
	(*ClusterMetrics)(nil),                    // 21: applicationmaster.ClusterMetrics
	(*timestamppb.Timestamp)(nil),             // 22: google.protobuf.Timestamp
}
var file_applicationmaster_proto_depIdxs = []int32{
	2,  // 0: applicationmaster.ApplicationAttemptID.application_id:type_name -> applicationmaster.ApplicationID
	0,  // 1: applicationmaster.ContainerRequest.capability:type_name -> applicationmaster.Resource
	1,  // 2: applicationmaster.Container.id:type_name -> applicationmaster.ContainerID
	4,  // 3: applicationmaster.Container.node_id:type_name -> applicationmaster.NodeID
	0,  // 4: applicationmaster.Container.resource:type_name -> applicationmaster.Resource
	7,  // 5: applicationmaster.Container.token:type_name -> applicationmaster.ContainerToken
	1,  // 6: applicationmaster.ContainerStatus.container_id:type_name -> applicationmaster.ContainerID
	4,  // 7: applicationmaster.NodeReport.node_id:type_name -> applicationmaster.NodeID
	0,  // 8: applicationmaster.NodeReport.used:type_name -> applicationmaster.Resource
	0,  // 9: applicationmaster.NodeReport.capability:type_name -> applicationmaster.Resource
	0,  // 10: applicationmaster.RegisterApplicationMasterResponse.maximum_resource_capability:type_name -> applicationmaster.Resource
	5,  // 11: applicationmaster.AllocateRequest.ask:type_name -> applicationmaster.ContainerRequest
	1,  // 12: applicationmaster.AllocateRequest.release:type_name -> applicationmaster.ContainerID
	8,  // 13: applicationmaster.AllocateRequest.completed_containers:type_name -> applicationmaster.ContainerStatus
	6,  // 14: applicationmaster.AllocateResponse.allocated_containers:type_name -> applicationmaster.Container
	8,  // 15: applicationmaster.AllocateResponse.completed_containers:type_name -> applicationmaster.ContainerStatus
	9,  // 16: applicationmaster.AllocateResponse.updated_nodes:type_name -> applicationmaster.NodeReport
	0,  // 17: applicationmaster.AllocateResponse.available_resources:type_name -> applicationmaster.Resource
	2,  // 18: applicationmaster.GetApplicationReportRequest.application_id:type_name -> applicationmaster.ApplicationID
	18, // 19: applicationmaster.GetApplicationReportResponse.application_report:type_name -> applicationmaster.ApplicationReport
	2,  // 20: applicationmaster.ApplicationReport.application_id:type_name -> applicationmaster.ApplicationID
	3,  // 21: applicationmaster.ApplicationReport.current_application_attempt_id:type_name -> applicationmaster.ApplicationAttemptID
	22, // 22: applicationmaster.ApplicationReport.start_time:type_name -> google.protobuf.Timestamp
	22, // 23: applicationmaster.ApplicationReport.finish_time:type_name -> google.protobuf.Timestamp
	21, // 24: applicationmaster.GetClusterMetricsResponse.cluster_metrics:type_name -> applicationmaster.ClusterMetrics
	0,  // 25: applicationmaster.ClusterMetrics.reserved_mb:type_name -> applicationmaster.Resource
	0,  // 26: applicationmaster.ClusterMetrics.available_mb:type_name -> applicationmaster.Resource
	0,  // 27: applicationmaster.ClusterMetrics.allocated_mb:type_name -> applicationmaster.Resource
	10, // 28: applicationmaster.ApplicationMasterService.RegisterApplicationMaster:input_type -> applicationmaster.RegisterApplicationMasterRequest
	12, // 29: applicationmaster.ApplicationMasterService.Allocate:input_type -> applicationmaster.AllocateRequest
	14, // 30: applicationmaster.ApplicationMasterService.FinishApplicationMaster:input_type -> applicationmaster.FinishApplicationMasterRequest
	16, // 31: applicationmaster.ApplicationMasterService.GetApplicationReport:input_type -> applicationmaster.GetApplicationReportRequest
	19, // 32: applicationmaster.ApplicationMasterService.GetClusterMetrics:input_type -> applicationmaster.GetClusterMetricsRequest
	11, // 33: applicationmaster.ApplicationMasterService.RegisterApplicationMaster:output_type -> applicationmaster.RegisterApplicationMasterResponse
	13, // 34: applicationmaster.ApplicationMasterService.Allocate:output_type -> applicationmaster.AllocateResponse
	15, // 35: applicationmaster.ApplicationMasterService.FinishApplicationMaster:output_type -> applicationmaster.FinishApplicationMasterResponse
	17, // 36: applicationmaster.ApplicationMasterService.GetApplicationReport:output_type -> applicationmaster.GetApplicationReportResponse
	20, // 37: applicationmaster.ApplicationMasterService.GetClusterMetrics:output_type -> applicationmaster.GetClusterMetricsResponse
	33, // [33:38] is the sub-list for method output_type
	28, // [28:33] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_applicationmaster_proto_init() }
func file_applicationmaster_proto_init() {
	if File_applicationmaster_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_applicationmaster_proto_rawDesc), len(file_applicationmaster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_applicationmaster_proto_goTypes,
		DependencyIndexes: file_applicationmaster_proto_depIdxs,
		MessageInfos:      file_applicationmaster_proto_msgTypes,
	}.Build()
	File_applicationmaster_proto = out.File
	file_applicationmaster_proto_goTypes = nil
	file_applicationmaster_proto_depIdxs = nil
}
