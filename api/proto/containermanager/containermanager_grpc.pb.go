// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: containermanager.proto

package containermanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContainerManagerService_StartContainer_FullMethodName     = "/containermanager.ContainerManagerService/StartContainer"
	ContainerManagerService_StopContainer_FullMethodName      = "/containermanager.ContainerManagerService/StopContainer"
	ContainerManagerService_GetContainerStatus_FullMethodName = "/containermanager.ContainerManagerService/GetContainerStatus"
	ContainerManagerService_GetContainerLogs_FullMethodName   = "/containermanager.ContainerManagerService/GetContainerLogs"
	ContainerManagerService_ListContainers_FullMethodName     = "/containermanager.ContainerManagerService/ListContainers"
)

// ContainerManagerServiceClient is the client API for ContainerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ContainerManagerService 容器管理gRPC服务
// ApplicationMaster通过此服务与NodeManager进行容器生命周期管理
type ContainerManagerServiceClient interface {
	// StartContainer 启动容器
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	// StopContainer 停止容器
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	// GetContainerStatus 获取容器状态
	GetContainerStatus(ctx context.Context, in *GetContainerStatusRequest, opts ...grpc.CallOption) (*GetContainerStatusResponse, error)
	// GetContainerLogs 获取容器日志
	GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (*GetContainerLogsResponse, error)
	// ListContainers 列出所有容器
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
}

type containerManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerManagerServiceClient(cc grpc.ClientConnInterface) ContainerManagerServiceClient {
	return &containerManagerServiceClient{cc}
}

func (c *containerManagerServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, ContainerManagerService_StartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagerServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, ContainerManagerService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagerServiceClient) GetContainerStatus(ctx context.Context, in *GetContainerStatusRequest, opts ...grpc.CallOption) (*GetContainerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerStatusResponse)
	err := c.cc.Invoke(ctx, ContainerManagerService_GetContainerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagerServiceClient) GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (*GetContainerLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerLogsResponse)
	err := c.cc.Invoke(ctx, ContainerManagerService_GetContainerLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagerServiceClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, ContainerManagerService_ListContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerManagerServiceServer is the server API for ContainerManagerService service.
// All implementations must embed UnimplementedContainerManagerServiceServer
// for forward compatibility.
//
// ContainerManagerService 容器管理gRPC服务
// ApplicationMaster通过此服务与NodeManager进行容器生命周期管理
type ContainerManagerServiceServer interface {
	// StartContainer 启动容器
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	// StopContainer 停止容器
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	// GetContainerStatus 获取容器状态
	GetContainerStatus(context.Context, *GetContainerStatusRequest) (*GetContainerStatusResponse, error)
	// GetContainerLogs 获取容器日志
	GetContainerLogs(context.Context, *GetContainerLogsRequest) (*GetContainerLogsResponse, error)
	// ListContainers 列出所有容器
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	mustEmbedUnimplementedContainerManagerServiceServer()
}

// UnimplementedContainerManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContainerManagerServiceServer struct{}

func (UnimplementedContainerManagerServiceServer) StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedContainerManagerServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedContainerManagerServiceServer) GetContainerStatus(context.Context, *GetContainerStatusRequest) (*GetContainerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerStatus not implemented")
}
func (UnimplementedContainerManagerServiceServer) GetContainerLogs(context.Context, *GetContainerLogsRequest) (*GetContainerLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerLogs not implemented")
}
func (UnimplementedContainerManagerServiceServer) ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedContainerManagerServiceServer) mustEmbedUnimplementedContainerManagerServiceServer() {
}
func (UnimplementedContainerManagerServiceServer) testEmbeddedByValue() {}

// UnsafeContainerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerManagerServiceServer will
// result in compilation errors.
type UnsafeContainerManagerServiceServer interface {
	mustEmbedUnimplementedContainerManagerServiceServer()
}

func RegisterContainerManagerServiceServer(s grpc.ServiceRegistrar, srv ContainerManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedContainerManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContainerManagerService_ServiceDesc, srv)
}

func _ContainerManagerService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagerServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerManagerService_StartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagerServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagerService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagerServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerManagerService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagerServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagerService_GetContainerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagerServiceServer).GetContainerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerManagerService_GetContainerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagerServiceServer).GetContainerStatus(ctx, req.(*GetContainerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagerService_GetContainerLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagerServiceServer).GetContainerLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerManagerService_GetContainerLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagerServiceServer).GetContainerLogs(ctx, req.(*GetContainerLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagerService_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagerServiceServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerManagerService_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagerServiceServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerManagerService_ServiceDesc is the grpc.ServiceDesc for ContainerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "containermanager.ContainerManagerService",
	HandlerType: (*ContainerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartContainer",
			Handler:    _ContainerManagerService_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _ContainerManagerService_StopContainer_Handler,
		},
		{
			MethodName: "GetContainerStatus",
			Handler:    _ContainerManagerService_GetContainerStatus_Handler,
		},
		{
			MethodName: "GetContainerLogs",
			Handler:    _ContainerManagerService_GetContainerLogs_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _ContainerManagerService_ListContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "containermanager.proto",
}
